var e=Object.defineProperty,n=Object.defineProperties,r=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,o=(n,r,l)=>r in n?e(n,r,{enumerable:!0,configurable:!0,writable:!0,value:l}):n[r]=l,c=(e,n)=>{for(var r in n||(n={}))t.call(n,r)&&o(e,r,n[r]);if(l)for(var r of l(n))a.call(n,r)&&o(e,r,n[r]);return e},p=(e,l)=>n(e,r(l));import{dg as u,a as s,a5 as i,c as d}from"./index-IQGo8WxO.js";const m={selection:{prop:"__selection__",label:u("table.column.selection")},expand:{prop:"__expand__",label:u("table.column.expand")},index:{prop:"__index__",label:u("table.column.index")}},v=e=>{var n,r;return null!=(r=null==(n=m[e.type])?void 0:n.prop)?r:e.prop},b=e=>e.map((e=>{var n;const r=e.type&&m[e.type];return p(c({},e),r?{prop:r.prop,label:r.label,checked:!0}:{checked:null==(n=e.checked)||n})}));function f(e){const n=s(e()),r=s(b(n.value));i(n,(e=>{const n=new Map(r.value.map((e=>{var n;return[v(e),null==(n=e.checked)||n]}))),l=b(e).map((e=>p(c({},e),{checked:n.has(v(e))?n.get(v(e)):e.checked})));r.value=l}),{deep:!0});const l=d((()=>{const e=new Map(n.value.map((e=>[v(e),e])));return r.value.filter((e=>e.checked)).map((n=>e.get(v(n)))).filter(Boolean)})),t=e=>{const r=[...n.value],l=e(r);n.value=Array.isArray(l)?l:r};return{columns:l,columnChecks:r,addColumn:(e,n)=>t((r=>{const l=[...r];return"number"==typeof n&&n>=0&&n<=l.length?l.splice(n,0,e):l.push(e),l})),removeColumn:e=>t((n=>{const r=Array.isArray(e)?e:[e];return n.filter((e=>!r.includes(v(e))))})),updateColumn:(e,n)=>t((r=>r.map((r=>v(r)===e?c(c({},r),n):r)))),toggleColumn:(e,n)=>{const l=r.value.findIndex((n=>v(n)===e));if(l>-1){const e=[...r.value];e[l]=p(c({},e[l]),{checked:null!=n?n:!e[l].checked}),r.value=e}},resetColumns:()=>{n.value=e()},batchUpdateColumns:e=>t((n=>{const r=new Map(e.map((e=>[e.prop,e.updates])));return n.map((e=>{const n=v(e),l=r.get(n);return l?c(c({},e),l):e}))})),reorderColumns:(e,n)=>t((r=>{if(e<0||e>=r.length||n<0||n>=r.length||e===n)return r;const l=[...r],[t]=l.splice(e,1);return l.splice(n,0,t),l})),getColumnConfig:e=>n.value.find((n=>v(n)===e)),getAllColumns:()=>[...n.value]}}export{v as g,f as u};
